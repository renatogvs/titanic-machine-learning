{"version":3,"sources":["TableCR.tsx","TablePerson.tsx","WebConsole.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["TableCR","render","className","props","header","map","value","index","tableData","valueElement","indexElement","React","Component","TablePerson","listElementsTable","person","id","name","sex","age","pclass","sibSp","parch","ticket","fare","cabin","embarked","survived","resultTitle","persons","WebConsole","onClick","doAction","rows","rowsSize","readOnly","outputText","App","doPrediction","model","tf","add","dense","inputShape","units","compile","optimizer","loss","metrics","personsJsonNormalized","data","personJson","Pclass","Sex","Age","SibSp","Parch","Fare","Embarked","tensorPersons","personsResultJsonNormalized","Survived","personsResult","fit","epochs","callbacks","onBatchEnd","batch","logs","setState","prevState","consoleText","acc","toFixed","onEpochEnd","epoch","then","info","toPredict","test","result","predict","dataSync","resultTest","Array","from","resultValue","personTest","state","personsTest","percent","Math","round","isTfReady","this","personsJson","PassengerId","Name","Ticket","Cabin","personsTestJson","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3cfc07eb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport class TableCR extends React.Component<ITableCRProps> {\r\n\r\n    render = () => {\r\n\r\n        return (\r\n\r\n                    <table className=\"tableCR\">\r\n                        <thead>\r\n                            <tr>\r\n                                {this.props.header.map((value, index) => {\r\n                                    return (<th key={index} className=\"headerTableCR\">{value}</th>)\r\n                                })}\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.props.tableData.map((value, index) => {\r\n                                return (<tr key={index}>\r\n                                    {value.map((valueElement, indexElement) => {\r\n                                        return (<td key={index * 100 + indexElement}>{valueElement}</td>)\r\n                                    })}\r\n                                </tr>)\r\n                            })}\r\n                        </tbody>\r\n\r\n                    </table>\r\n\r\n\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\ninterface ITableCRProps {\r\n    header: any[]\r\n    tableData: any[][]\r\n}","import React from 'react'\r\n\r\nimport { TableCR } from './TableCR'\r\n\r\nexport class TablePerson extends React.Component<ITablePersonProps, ITablePersonState> {\r\n\r\n  listElementsTable = (person: any[]) => {\r\n    const dataState = person.map((person) => {\r\n      return [person.id, person.name, person.sex,\r\n      person.age, person.pclass, person.sibSp, person.parch,\r\n      person.ticket, person.fare, person.cabin, person.embarked, '' + person.survived]\r\n    })\r\n\r\n    return dataState\r\n  }\r\n\r\n  render = () => {\r\n\r\n    return (\r\n      <div>\r\n        <TableCR header={[\"Id\", \"Name\", \"Sex\", \"Age\", \"Ticket class\", \r\n      \"Siblings/spouses aboard\", \"Parents/children aboard\", \"Ticket number\",\r\n      \"Fare\", \"Cabin number\", \"Port of Embarkation\", this.props.resultTitle]}\r\n       tableData={this.listElementsTable(this.props.persons)} />\r\n      </div>\r\n    );\r\n\r\n  }\r\n\r\n};\r\n\r\ninterface ITablePersonState {\r\n  data: any\r\n}\r\n\r\ninterface ITablePersonProps {\r\n  persons: any[]\r\n  resultTitle: string\r\n}","import React from 'react'\r\nimport './App.css';\r\n\r\nexport class WebConsole extends React.Component<WebConsoleProps, WebConsoleState> {\r\n\r\n    constructor(props: any) {\r\n        super(props);    \r\n    }\r\n\r\n    render = () => {\r\n        return <div>\r\n            <button onClick={() => this.props.doAction()}>Train the model</button>\r\n            <textarea className=\"webConsole\" rows={this.props.rowsSize} key={this.props.outputText} readOnly>\r\n                {this.props.outputText}\r\n            </textarea>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\ninterface WebConsoleProps {\r\n    outputText: string\r\n    rowsSize?: number\r\n    doAction: Function\r\n};\r\n\r\ninterface WebConsoleState {\r\n}","import React from 'react'\r\nimport { default as data } from './data/train.json'\r\nimport { default as test } from './data/test.json'\r\n\r\n\r\nimport * as tf from '@tensorflow/tfjs';\r\n\r\nimport './App.css';\r\nimport { TablePerson } from './TablePerson'\r\nimport { WebConsole } from './WebConsole'\r\n\r\nexport class App extends React.Component<AppProps, AppState> {\r\n\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      persons: [],\r\n      personsTest: [],\r\n      isTfReady: false,\r\n      consoleText: \"\"\r\n    }\r\n\r\n  }\r\n\r\n  async componentDidMount() {\r\n\r\n    // Wait for tf to be ready.\r\n    await tf.ready();\r\n\r\n    // Signal to the app that tensorflow.js can now be used.\r\n    this.setState({\r\n      isTfReady: true,\r\n    });\r\n\r\n    let personsJson = data.map((personJson: any) => {\r\n      let person: Person = {\r\n        id: personJson.PassengerId,\r\n        name: personJson.Name,\r\n        survived: personJson.Survived !== 0 ? \"True\" : \"False\",\r\n        pclass: personJson.Pclass,\r\n        sex: personJson.Sex,\r\n        age: typeof personJson.Age === 'number' ? personJson.Age : 0,\r\n        sibSp: personJson.SibSp,\r\n        parch: personJson.Parch,\r\n        ticket: '' + personJson.Ticket,\r\n        fare: personJson.Fare,\r\n        cabin: personJson.Cabin,\r\n        embarked: personJson.Embarked\r\n      }\r\n\r\n      return person\r\n    });\r\n\r\n    let personsTestJson = test.map((personJson: any) => {\r\n      let person: Person = {\r\n        id: personJson.PassengerId,\r\n        name: personJson.Name,\r\n        survived: \"Not predicted\",\r\n        pclass: personJson.Pclass,\r\n        sex: personJson.Sex,\r\n        age: typeof personJson.Age === 'number' ? personJson.Age : 0,\r\n        sibSp: personJson.SibSp,\r\n        parch: personJson.Parch,\r\n        ticket: '' + personJson.Ticket,\r\n        fare: personJson.Fare,\r\n        cabin: personJson.Cabin,\r\n        embarked: personJson.Embarked\r\n      }\r\n\r\n      return person\r\n    });\r\n\r\n    this.setState(prevState => ({\r\n      persons: personsJson,\r\n      personsTest: personsTestJson\r\n    }))\r\n\r\n  }\r\n\r\n  doPrediction = () => {\r\n    const model = tf.sequential();\r\n    model.add(tf.layers.dense({ inputShape: [7], units: 32 }));\r\n    model.add(tf.layers.dense({ inputShape: [32], units: 32 }));\r\n    model.add(tf.layers.dense({ inputShape: [32], units: 1 }));\r\n\r\n\r\n    model.compile({\r\n      optimizer: 'sgd',\r\n      loss: 'meanSquaredError',\r\n      metrics: ['accuracy']\r\n    });\r\n\r\n    let personsJsonNormalized = data.map((personJson: any) => {\r\n      let person = [\r\n        personJson.Pclass,\r\n        personJson.Sex === 'male' ? 0 : 1,\r\n        typeof personJson.Age === 'number' ? personJson.Age / 99 : 0,\r\n        personJson.SibSp,\r\n        personJson.Parch,\r\n        personJson.Fare / 600,\r\n        personJson.Embarked === 'C' ? 1 : personJson.Embarked === 'Q' ? 2 : 0\r\n      ]\r\n\r\n      return person\r\n    });\r\n\r\n    let tensorPersons = tf.tensor(personsJsonNormalized)\r\n\r\n    let personsResultJsonNormalized = data.map((personJson: any) => {\r\n      return personJson.Survived\r\n    });\r\n\r\n    let personsResult = tf.tensor(personsResultJsonNormalized)\r\n\r\n    // Train for 5 epochs with batch size of 32.\r\n    model.fit(tensorPersons, personsResult, {\r\n      epochs: 10,\r\n      callbacks: {\r\n        onBatchEnd: (batch: any, logs: any) => {\r\n          this.setState((prevState) => ({\r\n            consoleText: \"Accuracy: \" + (logs.acc * 100).toFixed(2) + \"% Batch: \" + (batch + 1) + \"\\r\\n\" + prevState.consoleText\r\n          }))\r\n        },\r\n        onEpochEnd: (epoch, logs) => {\r\n          this.setState((prevState) => ({\r\n            consoleText: \"Epoch: \" + (epoch + 1) + \"\\r\\n\" + prevState.consoleText\r\n          }))\r\n        }\r\n      }\r\n    }).then(info => {\r\n      \r\n      let toPredict = test.map((personJson: any) => {\r\n        let person = [\r\n          personJson.Pclass,\r\n          personJson.Sex === 'male' ? 0 : 1,\r\n          typeof personJson.Age === 'number' ? personJson.Age / 99 : 0,\r\n          personJson.SibSp,\r\n          personJson.Parch,\r\n          personJson.Fare / 600,\r\n          personJson.Embarked === 'C' ? 1 : personJson.Embarked === 'Q' ? 2 : 0\r\n        ]\r\n\r\n        return person\r\n      });\r\n\r\n      let result: tf.TypedArray = (model.predict(tf.tensor(toPredict)) as tf.Tensor).dataSync()\r\n\r\n      let resultTest = Array.from(result).map((resultValue: any, index: number) => {\r\n\r\n        let personTest = this.state.personsTest[index]\r\n        let percent = (Math.round(resultValue * 100))\r\n        personTest.survived = (percent >= 0 ? percent : 0) + '%';\r\n\r\n        return personTest\r\n      })\r\n\r\n      this.setState({ personsTest: resultTest })\r\n\r\n    });\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  render = () => {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Training table</h1>\r\n        <TablePerson persons={this.state.persons} resultTitle=\"Survival\" />\r\n\r\n        <WebConsole outputText={this.state.consoleText} rowsSize={10} doAction={this.doPrediction} />\r\n\r\n        <h1>Test table</h1>\r\n        <TablePerson persons={this.state.personsTest} resultTitle=\"Survival prediction\" />\r\n\r\n      </div>\r\n    );\r\n\r\n  }\r\n\r\n};\r\n\r\ninterface AppProps {\r\n\r\n};\r\n\r\ninterface AppState {\r\n  persons: Person[]\r\n  personsTest: Person[]\r\n  isTfReady: boolean\r\n  consoleText: string\r\n}\r\n\r\ninterface Person {\r\n  id: number\r\n  name: string\r\n  survived: string\r\n  pclass: number\r\n  sex: string\r\n  age: number\r\n  sibSp: number\r\n  parch: string\r\n  ticket: string\r\n  fare: number\r\n  cabin: string\r\n  embarked: string\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { App } from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}